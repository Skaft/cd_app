trigger:
  - main

variables:
  BUILDOZER_SYSTEM_DIR: /home/vsts/.buildozer
  BUILDOZER_PROJECT_DIR: $(System.DefaultWorkingDirectory)/.buildozer
  BIN_DIR: $(System.DefaultWorkingDirectory)/bin

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: test
  displayName: Running tests
  steps:
  #This part will install Pytest in order to run our tests. It also installs Xvfb, which is an in-memory display server.
  #It enables you to run graphical applications without a display, which is necessary in order to test inputs in our program.
  - script: pip install pytest pytest-cov
    displayName: Install pytest
  - script: sudo apt-get install -y xvfb
    displayName: Another install
  #This part will install Kivy, a Python Framework for developing mobile apps and other multitouch application software with interfaces
  #This is what allows our python code to run on the graphical interface we made
  - script: python -m pip install kivy[base] kivy_examples
    displayName: Install Kivy
  #This part will run the tests proper, it is done with the xvfb-run command to run them within xvfb. 
  #We have also added the --log-cli-level=INFO argument in order to get more detailed information about the testing.
  - script: xvfb-run pytest --log-cli-level=INFO
    displayName: Run tests
- job: build
  displayName: Building .apk
  dependsOn: test
  steps:
  # This part will install all the necessary dependencies needed in order to build the application
  - script: sudo apt update
    displayName: Prepare install
  - script: sudo apt install -y git zip unzip openjdk-8-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
    displayName: Install dependencies
  - script: pip3 install --user --upgrade Cython==0.29.19 virtualenv
    displayName: Get Cython
  - script: pip3 install --user buildozer
    displayName: Get Buildozer
  # This part will build and recall the cache in order to save a good part of the next step in storage, so that in following runs we can avoid waiting a very long time on it
  # This will bring our build time from 12 minutes to about 2 minutes.
  - task: Cache@2
    inputs:
      key: 'buildozer_system | "$(Agent.OS)" | requirements.txt'
      path: $(BUILDOZER_SYSTEM_DIR)
    displayName: Cache buildozer (system)
  - task: Cache@2
    inputs:
      key: 'buildozer_project | "$(Agent.OS)" | requirements.txt'
      path: $(BUILDOZER_PROJECT_DIR)
    displayName: Cache buildozer (project)
  # This part will convert our python code into the .apk file proper, making it ready to be run in android phones or emulators. 
  - script: buildozer android debug
    displayName: Build apk
  # This part will copy the built .apk file and store it in Azure Pipelines storage ready to be used, and will be saved even after the pipeline is done running.
  # This is necessary because otherwise all built files would be deleted as soon as the pipeline is finalized
  - task: CopyFiles@2
    displayName: Stage apk
    inputs:
      contents: '$(BIN_DIR)/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName: Publish apk
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)'
      artifactName: 'drop'
