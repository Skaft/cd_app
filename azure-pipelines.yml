# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
  BUILDOZER_SYSTEM_DIR: /home/vsts/.buildozer
  BUILDOZER_PROJECT_DIR: $(System.DefaultWorkingDirectory)/.buildozer
  BIN_DIR: $(System.DefaultWorkingDirectory)/bin

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: test
  displayName: Running tests
  steps:
  - script: echo Tests are being run!
- job: build
  displayName: Building .apk
  dependsOn: test
  steps:
  # This part will install all the necessary dependencies needed in order to build the application
  - script: sudo apt update
    displayName: Prepare install
  - script: sudo apt install -y git zip unzip openjdk-8-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
    displayName: Install dependencies
  - script: pip3 install --user --upgrade Cython==0.29.19 virtualenv
    displayName: Get Cython
  - script: pip3 install --user buildozer
    displayName: Get Buildozer
  # This part will build and recall the cache in order to save a good part of the next step in storage, so that in following runs we can avoid waiting a very long time on it
  # This will bring our build time from 12 minutes to about 2 minutes.
  - task: Cache@2
    inputs:
      key: 'buildozer_system | "$(Agent.OS)" | requirements.txt'
      path: $(BUILDOZER_SYSTEM_DIR)
    displayName: Cache buildozer (system)
  - task: Cache@2
    inputs:
      key: 'buildozer_project | "$(Agent.OS)" | requirements.txt'
      path: $(BUILDOZER_PROJECT_DIR)
    displayName: Cache buildozer (project)
  # This part will convert our python code into the .apk file proper, making it ready to be run in android phones or emulators. 
  - script: buildozer android debug
    displayName: Build apk
  # This part will copy the built .apk file and store it in Azure Pipelines storage ready to be used, and will be saved even after the pipeline is done running.
  # This is necessary because otherwise all built files would be deleted as soon as the pipeline is finalized
  - task: CopyFiles@2
    displayName: Stage apk
    inputs:
      contents: '$(BIN_DIR)/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName: Publish apk
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)'
      artifactName: 'drop'
  # FTP upload
# Upload files using FTP
  - task: FtpUpload@2
    inputs:
      credentialsOption: inputs
      serverUrl: 'ftp://198.27.65.36:21'
      username: fag
      password: rage
    rootDirectory: 
      filePatterns: '*.apk' 
      remoteDirectory: '/upload/$(Build.BuildId)/' 
      clean: false 
      cleanContents: false # Required when clean == False
      preservePaths: false 
      trustSSL: false 

