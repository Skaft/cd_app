# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
  BUILDOZER_SYSTEM_DIR: /home/vsts/.buildozer
  BUILDOZER_PROJECT_DIR: $(System.DefaultWorkingDirectory)/.buildozer
  BIN_DIR: $(System.DefaultWorkingDirectory)/bin

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: test
  displayName: Running tests
  steps:
  - script: echo Tests are being run!
- job: build
  displayName: Building .apk
  dependsOn: test
  steps:
  # This part will install all the necessary dependencies needed in order to build the application
  - script: sudo apt update
    displayName: Prepare install
  - script: sudo apt install -y git zip unzip openjdk-8-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
    displayName: Install dependencies
  - script: pip3 install --user --upgrade Cython==0.29.19 virtualenv
    displayName: Get Cython
  - script: pip3 install --user buildozer
    displayName: Get Buildozer
  # This part will build and recall the cache in order to save a good part of the next step in storage, so that in following runs we can avoid waiting a very long time on it
  # This will bring our build time from 12 minutes to about 2 minutes.
  - task: Cache@2
    inputs:
      key: 'buildozer_system | "$(Agent.OS)" | requirements.txt'
      path: $(BUILDOZER_SYSTEM_DIR)
    displayName: Cache buildozer (system)
  - task: Cache@2
    inputs:
      key: 'buildozer_project | "$(Agent.OS)" | requirements.txt'
      path: $(BUILDOZER_PROJECT_DIR)
    displayName: Cache buildozer (project)
  # This part will convert our python code into the .apk file proper, making it ready to be run in android phones or emulators. 
  - script: buildozer android debug
    displayName: Build apk
  # This part will copy the built .apk file and store it in Azure Pipelines storage ready to be used, and will be saved even after the pipeline is done running.
  # This is necessary because otherwise all built files would be deleted as soon as the pipeline is finalized
  - task: CopyFiles@2
    displayName: Stage apk
    inputs:
      contents: '$(BIN_DIR)/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName: Publish apk
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)'
      artifactName: 'drop'
  - task: CacheBeta@0
  displayName: 'Caching System Images for AVD'
  inputs:
    key: 'AVD_IMAGES_PIXEL_28'
    path: '$(ANDROID_HOME)/system-images'
    cacheHitVar: 'AVD_IMAGES_RESTORED'
  continueOnError: true
  condition: succeededOrFailed()
  - bash: | 
    echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-28;google_apis;x86' 
    echo "AVD system-image successfully downloaded and installed." 
  displayName: 'Download and install emulator image' 
  condition: ne(variables.AVD_IMAGES_RESTORED, 'true')
  - bash: | 
    echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n android_emulator -k 'system-images;android-28;google_apis;x86' -d 17 --force 
    echo "Emulator created successfully $(ANDROID_HOME/emulator/emulator -list-avds), launching it" 
    nohup $ANDROID_HOME/emulator/emulator -avd android_emulator -skin 1080x1920 -no-snapshot -no-audio -no-boot-anim -accel auto -gpu auto -qemu -lcd-density 420 > /dev/null 2>&1 & 
    $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done' 
    $ANDROID_HOME/platform-tools/adb devices echo "Emulator started" 
  displayName: 'Create and start emulator'
  - bash: | 
    ./gradlew connectedDebugAndroidTest --stacktrace 
    ./gradlew --stop 
  displayName: 'Run Instrumented Tests' 
  continueOnError: true
  - task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '**/outputs/androidTest-results/**/TEST*.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'Test results'
  condition: succeededOrFailed()
